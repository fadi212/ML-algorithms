#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep  4 10:49:07 2019

@author: fahad
"""
import math
from sklearn import neighbors
import os
import pickle
import face_recognition
from face_recognition.face_recognition_cli import image_files_in_folder
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import tensorflow as tf
import cv2
import argparse


config = tf.ConfigProto()
config.gpu_options.allow_growth = True

ap = argparse.ArgumentParser()

ap.add_argument("-d", "--train_dir", required=True,
                help="Path to directory containing training images")

ap.add_argument("-m", "--model", default="trained_knn_model.clf",
                help="Path to where the model will be saved")

ap.add_argument("-n", "--n_neighbors",type=int, default=None,
                help="Number of neighbors for knn")


ap.add_argument("-b", "--knn_algo", default="ball_tree",
                help="Algorithm for training knn")

ap.add_argument("-v", "--verbose", type=bool, default=False,
                help="For verbosity")

args = vars(ap.parse_args())


def train(train_dir, model_save_path, n_neighbors, knn_algo, verbose):   

    X = []
    y = []

    for class_dir in os.listdir(train_dir):
        if not os.path.isdir(os.path.join(train_dir, class_dir)):
            continue

        for img_path in image_files_in_folder(os.path.join(train_dir, class_dir)):
            image = face_recognition.load_image_file(img_path)
            image = cv2.resize(image, (0, 0), fx=0.5, fy=0.5)
            face_bounding_boxes = face_recognition.face_locations(image)

            if len(face_bounding_boxes) != 1:
                if verbose:
                    print("Image {} not suitable for training: {}".format(img_path, "Didn't find a face" if len(face_bounding_boxes) < 1 else "Found more than one face"))
            else:
                X.append(face_recognition.face_encodings(image, known_face_locations=face_bounding_boxes)[0])
                y.append(class_dir)
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
    if n_neighbors is None:
        n_neighbors = int(round(math.sqrt(len(X))))
        if verbose:
            print("Chose n_neighbors automatically:", n_neighbors)

    knn_clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors, algorithm=knn_algo, weights='uniform')
    knn_clf.fit(X_train, y_train)
    y_train_pred = knn_clf.predict(X_train)
    y_test_pred = knn_clf.predict(X_test)
    train_acc = accuracy_score(y_train, y_train_pred)
    test_acc = accuracy_score(y_test, y_test_pred)
    print(f"The Training Accuracy of the model is :{train_acc}")
    print(f'The Test Accuracy of the model is : {test_acc}')

    if model_save_path is not None:
        with open(model_save_path, 'wb') as f:
            pickle.dump(knn_clf, f)

    return knn_clf

if __name__ == "__main__":
    print("Training KNN classifier...")
    classifier = train(args["train_dir"], model_save_path=args["model"], n_neighbors=args["n_neighbors"], knn_algo=args["knn_algo"], verbose=args["verbose"])
    print("Training complete!")
